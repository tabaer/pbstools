#!/usr/bin/env python2
#
# jobscript-to-db -- copy newly spooled job scripts into database
# Python rewrite
# Copyright 2017 Ohio Supercomputer Center
#
# Derived from original Perl code:
# Copyright 2006 Ohio Supercomputer Center
#
# License:  GNU GPL v2; see ../COPYING for details.
#
# Not intended to be invoked directly, but rather by spool-jobscripts
# (which is itself invoked by dnotify or moral equivalent).

import getopt
import logging
import os
import pbsacct
import re
import sys

def usage():
    sys.stderr.write("Usage:\tjobscript-to-db\t[-h system] [-s dbhost] [-D dbtype]\n")
    sys.stderr.write("\t\t\t[-d dbname] [-u dbuser] [-p dbpasswd]\n")
    sys.stderr.write("\t\t\t[-t jobstable] [-C config_table] [-w sw_table]\n")
    sys.stderr.write("\t\t\t[-c cfgfile] [-A append_to_jobid_in_db] [-L|-l]\n")
    sys.stderr.write("\t\t\tjobscript [...jobscripts...]\n")
    sys.stderr.write("-L -- log to syslog\n")
    sys.stderr.write("-l -- log to stderr (default)\n")
    sys.exit(0)


#
# Main program starts here
#
dbhost = "localhost"
dbname = "pbsacct"
dbuser = "pbsacct"
dbpasswd = "pbsRroxor"
system = None
noop = False
append_to_jobid_in_db = None
syslog = False

db = pbsacct.pbsacctDB(host=dbhost,db=dbname,dbuser=dbuser,dbpasswd=dbpasswd)
if ( not os.environ.has_key("PBSTOOLS_DIR") ):
    os.environ["PBSTOOLS_DIR"] = "/usr/local"
cfgfile = os.environ["PBSTOOLS_DIR"]+"/etc/pbsacctdb.cfg"
if ( os.path.exists(cfgfile) ):
    db.readConfigFile(cfgfile)

# command line processing
try:
    opts, filelist = getopt.getopt(sys.argv[1:],
                                   "C:D:LTa:c:d:h:lp:s:t:u:w:",
                                   [])
except getopt.GetoptError, err:
    sys.stderr.write(str(err)+"\n")
    usage()
for opt in opts:
    if ( opt[0]=="-C" ):
        db.setConfigTable(opt[1])
    elif ( opt[0]=="-D" ):
        db.setType(opt[1])
    elif ( opt[0]=="-L" ):
        syslog = True
    elif ( opt[0]=="-T" ):
        noop = True
    elif ( opt[0]=="-a" ):
        append_to_jobid_in_db = opt[1]
    elif ( opt[0]=="-c" ):
        db.readConfigFile(opt[1])
    elif ( opt[0]=="-d" ):
        db.setName(opt[1])
    elif ( opt[0]=="-h" ):
        db.setSystem(opt[1])
    elif ( opt[0]=="-l" ):
        syslog = False
    elif ( opt[0]=="-p" ):
        db.setPassword(opt[1])
    elif ( opt[0]=="-s" ):
        db.setServerName(opt[1])
    elif ( opt[0]=="-t" ):
        db.setJobsTable(opt[1])
    elif ( opt[0]=="-u" ):
        db.setUser(opt[1])
    elif ( opt[0]=="-w" ):
        db.setSoftwareTable(opt[1])

if ( system is None and db.getSystem() is not None ):
    system = db.getSystem()
else:
    system = "%"

# configure logging
logger = pbsacct.getLogger()

if ( noop ):
    logger.setLevel(logging.INFO)
else:
    logger.setLevel(logging.WARNING)
lh = logging.StreamHandler(sys.stderr)
if ( syslog ):
    lh = logging.handlers.SysLogHandler(address='/dev/log')
lh.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s'))
logger.addHandler(lh)

# connect to DB
dbconn = db.connect()
cursor = dbconn.cursor()

for scriptfile in filelist:
    if ( os.path.exists(scriptfile) and os.access(scriptfile,os.R_OK) ):
        jobid = os.path.basename(scriptfile).rstrip(".SC")
        if ( append_to_jobid_in_db is not None ):
            jobid = jobid+append_to_jobid_in_db
        scriptfp = open(scriptfile)
        script = "".join(scriptfp.readlines())
        scriptfp.close()
        if ( db.job_exists(jobid) ):
            sql = "UPDATE "+db.getJobsTable()+" SET script=%s WHERE system LIKE %s AND jobid=%s;"
        else:
            sql = "INSERT INTO "+db.getJobsTable()+" (script,system,jobid) VALUES (%s,%s,%s);"
        if ( noop ):
            logger.info("%s (%s,%s,%s)" % (sql,script,system,jobid))
        else:
            try:
                cursor.execute(sql,(script,system,jobid))
                dbconn.commit()
            except Exception as e:
                logger.debug("%s" % sql)
                logger.error(str(e))

