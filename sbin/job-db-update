#!/usr/bin/python2
#
# job-db-update -- Insert job records into a MySQL DB
# Python rewrite
# Copyright 2017, 2018 Ohio Supercomputer Center
#
# Derived from original Perl code:
# Copyright 2006, 2007, 2016 Ohio Supercomputer Center
# Copyright 2008, 2009, 2010 University of Tennessee
#
# License:  GNU GPL v2; see ../COPYING for details.
#
# Usage:  job-db-update [-h system] [-s dbhost] [-D dbtype]
#                       [-d dbname] [-u dbuser] [-p dbpasswd]
#                       [-t jobstable] [-C config_table] [-w sw_table]
#                       [-c cfgfile] [-L|-l]
#                       acctfile [...acctfiles...]
# -L -- log to syslog
# -l -- log to stderr
#
# Can be run with no acct files listed to check DB connectivity

import getopt
import logging
import os
import pbsacct
import re
import sys

def usage():
    sys.stderr.write("Usage:\tjob-db-update\t[-h system] [-s dbhost] [-D dbtype]\n")
    sys.stderr.write("\t\t\t[-d dbname] [-u dbuser] [-p dbpasswd] [-q]\n")
    sys.stderr.write("\t\t\t[-t jobstable] [-C config_table] [-w sw_table]\n")
    sys.stderr.write("\t\t\t[-c cfgfile] [-a append_to_jobid_in_db] [-L|-l]\n")
    sys.stderr.write("\t\t\tacctfile [...acctfiles...]\n")
    sys.stderr.write("-L -- log to syslog\n")
    sys.stderr.write("-l -- log to stderr (default)\n")
    sys.exit(0)


#
# Main program starts here
#
dbhost = "localhost"
dbname = "pbsacct"
dbuser = "pbsacct"
dbpasswd = "pbsRroxor"
system = None
cfgfile = "/etc/pbsacctdb.cfg"
query = False
noop = False
syslog = False
append_to_jobid_in_db = None

db = pbsacct.pbsacctDB(host=dbhost,db=dbname,dbuser=dbuser,dbpasswd=dbpasswd)
if ( not os.environ.has_key("PBSTOOLS_DIR") ):
    os.environ["PBSTOOLS_DIR"] = "/usr/local"
cfgfile = os.environ["PBSTOOLS_DIR"]+"/etc/pbsacctdb.cfg"
if ( os.path.exists(cfgfile) ):
    db.readConfigFile(cfgfile)

# command line processing
try:
    opts, filelist = getopt.getopt(sys.argv[1:],
                                   "C:D:LTa:c:d:h:lp:qs:t:u:w:",
                                   [])
except getopt.GetoptError, err:
    sys.stderr.write(str(err)+"\n")
    usage()
for opt in opts:
    if ( opt[0]=="-C" ):
        db.setConfigTable(opt[1])
    elif ( opt[0]=="-D" ):
        db.setType(opt[1])
    elif ( opt[0]=="-L" ):
        syslog = True
    elif ( opt[0]=="-T" ):
        noop = True
    elif ( opt[0]=="-a" ):
        append_to_jobid_in_db = opt[1]
    elif ( opt[0]=="-c" ):
        db.readConfigFile(opt[1])
    elif ( opt[0]=="-d" ):
        db.setName(opt[1])
    elif ( opt[0]=="-h" ):
        db.setSystem(opt[1])
    elif ( opt[0]=="-l" ):
        syslog = False
    elif ( opt[0]=="-p" ):
        db.setPassword(opt[1])
    elif ( opt[0]=="-q" ):
        query = True
    elif ( opt[0]=="-s" ):
        db.setServerName(opt[1])
    elif ( opt[0]=="-t" ):
        db.setJobsTable(opt[1])
    elif ( opt[0]=="-u" ):
        db.setUser(opt[1])
    elif ( opt[0]=="-w" ):
        db.setSoftwareTable(opt[1])

if ( system is None and db.getSystem() is not None ):
    system = db.getSystem()

# configure logging
try:
    logger = pbsacct.getLogger()
except:
    logger = logging.getLogger(sys.argv[0])

if ( noop ):
    logger.setLevel(logging.INFO)
else:
    logger.setLevel(logging.WARNING)
lh = logging.StreamHandler(sys.stderr)
if ( syslog ):
    lh = logging.handlers.SysLogHandler(address='/dev/log')
lh.setFormatter(logging.Formatter('[%(asctime)s] %(levelname)s: %(message)s'))
logger.addHandler(lh)

# connect to DB
dbconn = db.connect()
cursor = dbconn.cursor()

# ingest job data from accounting logs
if ( len(filelist)>0 ):
    jobs = pbsacct.jobs_from_files(filelist,system)
    
    for jobid in sorted(jobs,key=lambda jobid:jobs[jobid].end_ts):
        # in some versions of TORQUE, jobs that are deleted before they start
        # will be reported as in the E state with an end time (when it was
        # qdel'ed) but no start time, so just checking for the E state is not
        # enough to avoid false positives here
        if ( jobs[jobid].get_state() in ["S","E","A"] and
             jobs[jobid].start_ts()>0 ):
          try:
            if ( query ):
                dbjob = None
                if ( db.job_exists(jobid,append_to_jobid=append_to_jobid_in_db) ):
                    dbjob = db.get_job(jobid,append_to_jobid=append_to_jobid_in_db)
                if ( dbjob is None ):
                    logger.info("Jobid %s does not exist in DB" % jobid)
                elif ( dbjob!=jobs[jobid] ):
                    if ( jobid!=dbjob.jobid() ):
                        logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, "jobid", str(dbjob.jobid(), str(jobid))))
                    if ( jobs[jobid].user()!=dbjob.user() ):
                        logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, "user", str(dbjob.user()), str(jobs[jobid].user())))
                    if ( jobs[jobid].group()!=dbjob.group() ):
                        logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, "group", str(dbjob.group()), str(jobs[jobid].group())))
                    if ( jobs[jobid].account()!=dbjob.account() ):
                        logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, "account", str(dbjob.account()), str(jobs[jobid].account())))
                    if ( jobs[jobid].queue()!=dbjob.queue() ):
                        logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, "queue", str(dbjob.queue()), str(jobs[jobid].queue())))
                    for column in list( set(jobs[jobid].get_resource_keys()) | set(dbjob.get_resource_keys()) ):
                        dbvalue = dbjob.get_resource(column)
                        logvalue = jobs[jobid].get_resource(column)
                        ignorecolumns = ["qtime",
                                         "Resource_List.pmem",
                                         "resources_used.energy_used",
                                         "session",
                                         "total_execution_slots",
                                         "unique_node_count"]
                        if ( column not in ignorecolumns ):
                            if ( str(dbvalue)!=str(logvalue) ):
                                if ( column in ["ctime","etime","start","end"] and ( dbvalue is not None and dbvalue!=0 ) and ( logvalue is not None and logvalue!=0 ) ):
                                    logger.info("%s %s:  dbvalue=%s, logvalue=%s, difference=%d" % (jobid, column, str(dbvalue), str(logvalue), int(dbvalue)-int(logvalue)))
                                # resources_used.cput and resources_used.walltime are weird because sometimes
                                # they're reported in hh:mm:ss format and sometimes they're just in seconds,
                                # depending on which version of TORQUE you're using.
                                elif ( column=="resources_used.cput" and dbvalue is not None and logvalue is not None and pbsacct.time_to_sec(dbvalue)==int(logvalue) ):
                                    next
                                elif ( column=="resources_used.cput" and dbvalue is not None and logvalue is not None and pbsacct.time_to_sec(dbvalue)!=int(logvalue) ):
                                    logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, column, str(dbvalue), pbsacct.sec_to_time(int(logvalue))))
                                elif ( column=="resources_used.walltime" and dbvalue is not None and logvalue is not None and pbsacct.time_to_sec(dbvalue)==int(logvalue) ):
                                    next
                                elif ( column=="resources_used.walltime" and dbvalue is not None and logvalue is not None and pbsacct.time_to_sec(dbvalue)!=int(logvalue) ):
                                    logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, column, str(dbvalue), pbsacct.sec_to_time(int(logvalue))))
                                elif ( ( dbvalue is not None and dbvalue!=0 ) and ( logvalue is not None and logvalue!=0 ) ):
                                    logger.info("%s %s:  dbvalue=%s, logvalue=%s" % (jobid, column, str(dbvalue), str(logvalue)))
            else:
                db.insert_or_update_job(jobs[jobid],system=system,noop=noop,append_to_jobid=append_to_jobid_in_db)
          except:
              pass

dbconn.close()
