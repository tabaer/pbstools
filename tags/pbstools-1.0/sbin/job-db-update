#!/usr/bin/perl
#
# job-db-update -- Insert job records into a MySQL DB
# Copyright 2005 Ohio Supercomputer Center
#
# Usage:  job-db-update [-h system] [-s dbhost] [-d dbname] [-t dbtable]
#                       [-u dbuser] [-p dbpasswd] acctfile [...acctfiles...]
#
# Can be run with no acct files listed to check DB connectivity

use POSIX;
use DBI;

sub resourcelist
  {
    local($resources) = @_;
    
    @resourcelist=split(/ /,$resources);
    foreach $field ( @resourcelist )
      {
        ($key,$value) = ($field =~ /^([^=]*)=(.*)/);
        $resource{$key}=$value;
      }
    %resource;
  }

sub max
  {
    local(@item) = @_;
    local($nitems,$maxval,$i);
    
    $nitems=$#item;
    $maxval=$item[0];
    if ( $nitems > 0 )
      {
	for ( $i=0 ; $i <= $nitems ; $i++ )
	  {
	    if ( $item[$i] > $maxval )
	      {
		$maxval=$item[$i];
	      }
	  }
      }
    $maxval;
  }

#
# Main program starts here
#
$dbhost="localhost";
$dbuser="pbsacct";
$dbpasswd="pbsRroxor";
$dbname="pbsacct";
$dbtable="Jobs";
$hostname=`hostname`;

while ( $ARGV[0] =~ /^-.*/ )
  {
    if ( $ARGV[0] eq "-d" )
      {
	$dbname=$ARGV[1];
	shift(@ARGV);
      }
    elsif ( $ARGV[0] eq "-h" )
      {
	$hostname=$ARGV[1];
	shift(@ARGV);
      }
    elsif ( $ARGV[0] eq "-p" )
      {
	$dbpasswd=$ARGV[1];
	shift(@ARGV);
      }
    elsif ( $ARGV[0] eq "-s" )
      {
	$dbhost=$ARGV[1];
	shift(@ARGV);
      }
    elsif ( $ARGV[0] eq "-t" )
      {
	$dbtable=$ARGV[1];
	shift(@ARGV);
      }
    elsif ( $ARGV[0] eq "-u" )
      {
	$dbuser=$ARGV[1];
	shift(@ARGV);
      }

    shift(@ARGV);
   }

# connect to DB
$dsn = "DBI:mysql:database=$dbname;host=$dbhost;";
$dbh = DBI->connect($dsn,$dbuser,$dbpasswd) ||
  die "$0:  unable to connect to DB!\n";

# process PBS acct records
while ( defined($ARGV[0]) )
  {
    open(ACCTFILE,"<$ARGV[0]");
    
    while ( <ACCTFILE> )
      {
	chop;
	($etime,$type,$job,$resources)=split(/;/);
	%resource=&resourcelist($resources);
	
	if ( $type eq "E" )
	  {
	    ($jobid,$junk)=split(/\./,$job);
	    $pstring = $resource{"Resource_List.nodes"};
	    @node_plus_ppn = split(/\+/, $pstring);
	    $processors = 0;
	    foreach $node_plus_ppn (@node_plus_ppn)
	      {
		($nodes,$ppnstring) = split(/\:/, $node_plus_ppn);
		$processors_per = substr($ppnstring,4);
		if ( $nodes < 1 ) { $nodes = 1; }
		if ( $processors_per < 1 ) { $processors_per = 1; }
		$processors += $nodes * $processors_per;
	      }
	    $ncpus=&max($resource{"Resource_List.ncpus"},
			$resource{"resources_used.ncpus"});
	    $nprocs=&max($processors,$ncpus);
	    $mem=$resource{"resources_used.mem"};
	    $mem=~s/kb$//;
	    $vmem=$resource{"resources_used.vmem"};
	    $vmem=~s/kb$//;

	    # construct query string(s)
	    $qhead = "INSERT INTO $dbtable \(jobid,system";
	    $qvals = " VALUES \(\'$job\',\'$hostname\'";
	    if ( defined($resource{"user"}) )
	      {
		$qhead=$qhead.",username";
		$qvals=$qvals.",\'".$resource{"user"}."\'";
	      }
	    if ( defined($resource{"group"}) )
	      {
		$qhead=$qhead.",groupname";
		$qvals=$qvals.",\'".$resource{"group"}."\'";
	      }
	    if ( defined($resource{"jobname"}) )
	      {
		$qhead=$qhead.",jobname";
		$qvals=$qvals.",\'".$resource{"jobname"}."\'";
	      }
	    if ( $nprocs>0 )
	      {
		$qhead=$qhead.",nproc";
		$qvals=$qvals.",\'$nprocs\'";
	      }
	    if ( defined($resource{"Resource_List.nodes"}) )
	      {
		$qhead=$qhead.",nodes";
		$qvals=$qvals.",\'".$resource{"Resource_List.nodes"}."\'";
	      }
	    if ( defined($resource{"queue"}) )
	      {
		$qhead=$qhead.",queue";
		$qvals=$qvals.",\'".$resource{"queue"}."\'";
	      }
	    if ( defined($resource{"ctime"}) )
	      {
		$qhead=$qhead.",submit_ts";
		$qvals=$qvals.",\'".$resource{"ctime"}."\'";
	      }
	    if ( defined($resource{"start"}) )
	      {
		$qhead=$qhead.",start_ts";
		$qvals=$qvals.",\'".$resource{"start"}."\'";
	      }
	    if ( defined($resource{"end"}) )
	      {
		$qhead=$qhead.",end_ts";
		$qvals=$qvals.",\'".$resource{"end"}."\'";
	      }
	    if ( defined($resource{"Resource_List.cput"}) )
	      {
		$qhead=$qhead.",cput_req";
		$qvals=$qvals.",\'".$resource{"Resource_List.cput"}."\'";
	      }
	    if ( defined($resource{"resources_used.cput"}) )
	      {
		$qhead=$qhead.",cput";
		$qvals=$qvals.",\'".$resource{"resources_used.cput"}."\'";
	      }
	    if ( defined($resource{"Resource_List.walltime"}) )
	      {
		$qhead=$qhead.",walltime_req";
		$qvals=$qvals.",\'".$resource{"Resource_List.walltime"}."\'";
	      }
	    if ( defined($resource{"resources_used.walltime"}) )
	      {
		$qhead=$qhead.",walltime";
		$qvals=$qvals.",\'".$resource{"resources_used.walltime"}."\'";
	      }
	    if ( defined($resource{"Resource_List.mem"}) )
	      {
		$qhead=$qhead.",mem_req";
		$qvals=$qvals.",\'".$resource{"Resource_List.mem"}."\'";
	      }
	    if ( defined($resource{"resources_used.mem"}) )
	      {
		$qhead=$qhead.",mem_kb";
		$qvals=$qvals.",\'$mem\'";
	      }
	    if ( defined($resource{"Resource_List.vmem"}) )
	      {
		$qhead=$qhead.",vmem_req";
		$qvals=$qvals.",\'".$resource{"Resource_List.vmem"}."\'";
	      }
	    if ( defined($resource{"resources_used.vmem"}) )
	      {
		$qhead=$qhead.",vmem_kb";
		$qvals=$qvals.",\'$vmem\'";
	      }
	    if ( defined($resource{"resources_used.mppe"}) )
	      {
		$qhead=$qhead.",mppe";
		$qvals=$qvals.",\'".$resource{"resources_used.mppe"}."\'";
	      }		
	    if ( defined($resource{"resources_used.mppssp"}) )
	      {
		$qhead=$qhead.",mppssp";
		$qvals=$qvals.",\'".$resource{"resources_used.mppssp"}."\'";
	      }		
	    if ( defined($resource{"exec_host"}) )
	      {
		$qhead=$qhead.",hostlist";
		$qvals=$qvals.",\'".$resource{"exec_host"}."\'";
	      }
	    if ( defined($resource{"Exit_status"}) )
	      {
		$qhead=$qhead.",exit_status";
		$qvals=$qvals.",\'".$resource{"Exit_status"}."\'";
	      }
	    # There's a column for the script file, if we can ever figure
	    # out how to store it...

	    $qhead=$qhead."\)";
	    $qvals=$qvals."\);";
	    $query=$qhead.$qvals;

#	    print "$query\n";
	    $dbh->do($query);
	  }
      }
    shift(@ARGV);
  }
$dbh->disconnect();
